// Generated by CoffeeScript 1.8.0
(function() {
  var ChildProcess, EventEmitter, Phantomjs, expect, isCoffee, path, phantomjs, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require("underscore");

  expect = require('chai').expect;

  ChildProcess = require('./ChildProcess');

  EventEmitter = require('events').EventEmitter;

  path = require('path');

  phantomjs = require('phantomjs');

  process.env.PATH = path.dirname(phantomjs.path) + ':' + process.env.PATH;

  isCoffee = __filename.indexOf('.coffee') > 0;

  Phantomjs = (function(_super) {
    __extends(Phantomjs, _super);

    function Phantomjs() {
      this.run = __bind(this.run, this);
      return Phantomjs.__super__.constructor.apply(this, arguments);
    }

    Phantomjs.prototype.childProcess = null;

    Phantomjs.prototype.run = function(url, options, script) {
      var env, spawnArgs, spawnOptions;
      if (options == null) {
        options = '--load-images=no --ssl-protocol=TLSv1';
      }
      if (script == null) {
        script = "phantomjs-test-in-console";
      }
      log.debug("Phantomjs.run()", arguments);
      expect(url, "Invalid url").to.be.a('string');
      expect(options, "Invalid options").to.be.a('string');
      expect(script, "Invalid script").to.be.a('string');
      expect(this.childProcess, "ChildProcess is already running").to.be["null"];
      env = _.extend(process.env, {
        ROOT_URL: url
      });
      script += isCoffee ? '.coffee' : '.js';
      log.debug("script=" + __dirname + "/" + script);
      spawnArgs = options.split(' ');
      spawnArgs.push(script);
      spawnOptions = {
        cwd: __dirname,
        detached: false,
        env: env
      };
      this.childProcess = new ChildProcess();
      this.childProcess.spawn("phantomjs", spawnArgs, spawnOptions);
      return this.childProcess.child.on("exit", (function(_this) {
        return function(code, signal) {
          return _this.emit("exit", code, signal);
        };
      })(this));
    };

    Phantomjs.prototype.kill = function(signal) {
      var _ref;
      if (signal == null) {
        signal = "SIGTERM";
      }
      log.debug("Phantomjs.kill()");
      return (_ref = this.childProcess) != null ? _ref.kill(signal) : void 0;
    };

    return Phantomjs;

  })(EventEmitter);

  module.exports = Phantomjs;

}).call(this);
