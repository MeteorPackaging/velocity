// Generated by CoffeeScript 1.8.0
(function() {
  var CLI, Meteor, Spacejam, expect, fs, path, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  require('./log');

  fs = require("fs");

  path = require("path");

  _ = require("underscore");

  expect = require("chai").expect;

  Spacejam = require('./Spacejam');

  Meteor = require('./Meteor');

  require.extensions['.txt'] = function(module, filename) {
    return module.exports = fs.readFileSync(filename, 'utf8');
  };

  CLI = (function() {
    var instance;

    instance = null;

    CLI.get = function() {
      return instance != null ? instance : instance = new CLI();
    };

    CLI.prototype.commands = {
      "test-packages": "testPackages",
      "test-in-velocity": "testInVelocity"
    };

    CLI.prototype.options = null;

    CLI.prototype.spacejam = null;

    CLI.prototype.pidPath = null;

    function CLI() {
      this.onProcessExit = __bind(this.onProcessExit, this);
      this.spacejam = new Spacejam();
      log.debug("CLI.constructor()");
      process.on('SIGPIPE', (function(_this) {
        return function(code) {
          var _ref;
          log.info("spacejam: Received a SIGPIPE signal. Killing all child processes...");
          return (_ref = _this.spacejam) != null ? _ref.killChildren() : void 0;
        };
      })(this));
    }

    CLI.prototype.pidFileInit = function(pidFile) {
      var err, pid, pidPath;
      log.debug("CLI.checkAndCreatePidFile()", arguments);
      expect(pidFile).to.be.a('string').that.has.length.above(0);
      pidPath = path.resolve(pidFile);
      if (fs.existsSync(pidPath)) {
        pid = +fs.readFileSync(pidPath);
        log.info("spacejam: Found pid file " + pidFile + " with pid " + pid + ", checking if process is alive.");
        try {
          process.kill(pid, 0);
          log.warn("spacejam: process with pid " + pid + " is already running, exiting.");
          process.exit(Spacejam.DONE.ALREADY_RUNNING);
        } catch (_error) {
          err = _error;
          log.trace(err);
          log.warn("spacejam: pid file " + pidFile + " exists, but process is dead, ignoring it.");
        }
      }
      log.info("spacejam: Saving pid " + process.pid + " to " + pidPath);
      fs.writeFileSync(pidPath, "" + process.pid);
      this.pidPath = pidPath;
      process.on('exit', this.onProcessExit);
    };

    CLI.prototype.onProcessExit = function(code) {
      var err;
      log.info("spacejam: spacejam is exiting with code " + code + ", deleting pid file.");
      try {
        return fs.unlinkSync(this.pidPath);
      } catch (_error) {
        err = _error;
        log.trace(err);
        return log.error("spacejam: Error deleting pid file " + this.pidPath, err);
      }
    };

    CLI.prototype.exec = function() {
      var command, err, version;
      log.debug("CLI.exec()");
      expect(this.options, "You can only call CLI.exec() once").to.be["null"];
      this.options = require("rc")("spacejam", {});
      if (this.options['pid-file'] != null) {
        this.pidFileInit(this.options['pid-file']);
      }
      command = this.options._[0];
      log.debug("command: " + command);
      if (command === 'help') {
        this.printHelp();
        process.exit(0);
      } else if (command === 'package-version') {
        version = Meteor.getPackageVersion();
        console.log(version);
        process.exit(0);
      }
      if (!_.has(this.commands, command)) {
        if (command) {
          log.error("spacejam: Error: \n'" + command + "' is not a recognized command\n");
        }
        this.printHelp();
      }
      this.options.packages = this.options._.slice(1);
      delete this.options._;
      log.debug("CLI.exec() options:", this.options);
      this.spacejam.on('done', (function(_this) {
        return function(code) {
          return process.exit(code);
        };
      })(this));
      try {
        return this.spacejam[this.commands[command]](this.options);
      } catch (_error) {
        err = _error;
        console.trace(err);
        return process.exit(1);
      }
    };

    CLI.prototype.printHelp = function() {
      log.debug("CLI.printHelp()");
      return process.stdout.write(require('../bin/help.txt'));
    };

    return CLI;

  })();

  module.exports = CLI;

}).call(this);
